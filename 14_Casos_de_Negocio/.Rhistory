set.seed(1)
sample(hfweight_vector,1)
install.packages("dplyr")
dat<-read.csv("msleep_ggplot2.csv")
dat<-read.csv("msleep_ggplot2.csv")
library(readr)
dat <- read_csv("EDX course/msleep_ggplot2.csv")
View(dat)
library(readr)
dat <- read_csv("EDX course/msleep_ggplot2.csv")
class(dat)
dat <- read_csv("msleep_ggplot2.csv")
#-----------------------------------------------
library(dplyr)
View(dat)
filter(dat,order=="Primates") %>% nrow()
filter(dat,order=="Primates") %>% class()
View(dat)
filter(dat,order=="Primates") %>% select(dat,sleep_total)
filter(dat,order=="Primates") %>% select(sleep_total)
filter(dat,order=="Primates")
filter(dat,order=="Primates") %>% select(name,sleep_total)
filter(dat,order=="Primates") %>% select(sleep_total) %>% class()
?unlist
filter(dat,order=="Primates") %>% select(sleep_total) %>% unlist()
filter(dat,order=="Primates") %>% select(sleep_total) %>% unlist() %>% mean()
filter(dat,order=="Primates") %>% summarize()
filter(dat,order=="Primates")
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% summarize(sleep_total)
filter(dat,order=="Primates") %>% summarize(sleep_total)
filter(dat,order=="Primates") %>% summarise(sleep_total)
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% summarise()
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% class()
#Using summarize() dplyr function
filter(dat,order=="Primates")
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% summarise(sleep_total,mean())
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% summarise(mean())
#Using summarize() dplyr function
filter(dat,order=="Primates") %>% summarise(,avg_sleep=mean(sleep_total))
#Using summarize() dplyr function
summarise(filter(dat,order=="Primates") ,avg_sleep=mean(sleep_total))
if(!require("dplyr")){
install.packages("dplyr")
library("dplyr")
}
if(!require("MASS")){
install.packages("MASS")
library("MASS")
}
MediaWinsor<-function(x,probs=c(0.05,0.95)) {
xq<-quantile(x,probs=probs)
x[x < xq[1]]<-xq[1]
x[x > xq[2]]<-xq[2]
return(mean(x))
}
MediaWinsor<-function(x,probs=c(0.05,0.95)) {
xq<-quantile(x,probs=probs)
x[x < xq[1]]<-xq[1]
x[x > xq[2]]<-xq[2]
return(mean(x))
}
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
str(Viviendas)
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
Viviendas=read.csv2("./datos/Viviendas.csv",stringsAsFactors = FALSE)
str(Viviendas)
head(Viviendas)
summary(Viviendas)
# eliminamos los registros sin precio
Viviendas=Viviendas[!is.na(Viviendas$Precio),]
summary(Viviendas)
str(Viviendas)
Viviendas$piso=as.numeric(grepl("[Pp][Ii][Ss][Oo]",Viviendas$Direccion))
Viviendas$duplex=as.numeric(grepl("[Dd][Uu????][Pp][Ll][Ee][Xx]",Viviendas$Direccion))
Viviendas$chalet=as.numeric(grepl("[Cc][Hh][Aa][Ll][Ee][Tt]",Viviendas$Direccion))
Viviendas$estudio=as.numeric(grepl("[Ee][Ss][Tt][Uu][Dd][Ii][Oo]",Viviendas$Direccion))
Viviendas$atico=as.numeric(grepl("[Aa????][Tt][Ii][Cc][Oo]",Viviendas$Direccion))
# Suponemos que la intersecci??n es disjunta aunque puede no serlo
Viviendas$Tipologia=""
Viviendas$Tipologia[Viviendas$piso==1]="Piso"
Viviendas$Tipologia[Viviendas$duplex==1]="Duplex"
Viviendas$Tipologia[Viviendas$atico==1]="Atico"
Viviendas$Tipologia[Viviendas$chalet==1]="Chalet"
Viviendas$Tipologia[Viviendas$estudio==1]="Estudio"
table(Viviendas$Tipologia)
Viviendas$piscina=as.numeric(grepl("[Pp][Ii][Ss][Cc][Ii][Nn][Aa]",Viviendas$Info))
Viviendas$garage=as.numeric(grepl("[Gg][Aa][Rr][Aa][Gg][Ee]",Viviendas$Info))
Viviendas$ascensor=as.numeric(grepl("[Aa][Ss][Cc][Ee][Nn][Ss][Oo][Rr]",Viviendas$Info))
Viviendas$terraza=as.numeric(grepl("[Tt][Ee][Rr][Rr][Aa][Zz][Aa]",Viviendas$Info))
Viviendas$amueblado=as.numeric(grepl("[Aa][Mm][Uu][Ee][Bb][Ll][Aa][Dd][OoAa]",Viviendas$Info))
RESUMEN=summarise(group_by(Viviendas, Tipologia),
Num_Viv=length(Precio),
Precio = mean(Precio),
Superficie = mean(Superficie),
Piscina = mean(piscina),
Garage = mean(garage),
Ascensor = mean(ascensor),
Terraza = mean(terraza),
Amueblado = mean(amueblado)
)
RESUMEN
summary(Viviendas$Precio)
hist(Viviendas$Precio)
hist(log(Viviendas$Precio))
boxplot(Viviendas$Precio)
boxplot(Viviendas$Precio[Viviendas$Precio<300000])
summary(Viviendas$Superficie)
hist(Viviendas$Superficie)
hist(log(Viviendas$Superficie))
boxplot(Viviendas$Superficie)
boxplot(Viviendas$Superficie[Viviendas$Superficie<200])
ALPHA=0.15
PRECIOS=summarise(group_by(Viviendas, Tipologia),
Num_Viv=length(Precio),
Media = mean(Precio),
p_Media=sum(Precio<=Media)/length(Precio),
M??nimo = min(Precio),
Q1 = quantile(Precio,probs=0.25),
Mediana = median(Precio),
Q3 = quantile(Precio,probs=0.75),
M??ximo = max(Precio),
MediaWindsor =  MediaWinsor(Precio,prob=c(ALPHA,1-ALPHA)),
p_Windsor=sum(Precio<=MediaWindsor)/length(Precio),
MediaRecortada =mean(Precio,trim=ALPHA),
p_Recortada=sum(Precio<=MediaRecortada)/length(Precio)
)
PRECIOS
PRECIOS=summarise(group_by(Viviendas, Tipologia),
Num_Viv=length(Precio),
Media = mean(Precio),
p_Media=sum(Precio<=Media)/length(Precio),
M??nimo = min(Precio),
Q1 = quantile(Precio,probs=0.25),
Mediana = median(Precio),
Q3 = quantile(Precio,probs=0.75),
M??ximo = max(Precio),
MediaWindsor =  MediaWinsor(Precio,prob=c(ALPHA,1-ALPHA)),
p_Windsor=sum(Precio<=MediaWindsor)/length(Precio),
MediaRecortada =mean(Precio,trim=ALPHA),
p_Recortada=sum(Precio<=MediaRecortada)/length(Precio)
)
PRECIOS=summarise(group_by(Viviendas, Tipologia),
Num_Viv=length(Precio),
Media = mean(Precio),
p_Media=sum(Precio<=Media)/length(Precio),
Minimo = min(Precio),
Q1 = quantile(Precio,probs=0.25),
Mediana = median(Precio),
Q3 = quantile(Precio,probs=0.75),
Maximo = max(Precio),
MediaWindsor =  MediaWinsor(Precio,prob=c(ALPHA,1-ALPHA)),
p_Windsor=sum(Precio<=MediaWindsor)/length(Precio),
MediaRecortada =mean(Precio,trim=ALPHA),
p_Recortada=sum(Precio<=MediaRecortada)/length(Precio)
)
PRECIOS
View(PRECIOS)
alphas=seq(from=0,to=0.5,by=0.01)
medias_recortadas=c()
medias_winsorizadas=c()
for (alpha in alphas){
medias_recortadas=c(medias_recortadas,mean(Viviendas$Precio, trim=alpha))
medias_winsorizadas=c(medias_winsorizadas,MediaWinsor(Viviendas$Precio,probs=c(alpha,1-alpha)))
}
Estimadores=data.frame(alphas)
Estimadores$media=mean(Viviendas$Precio)
Estimadores$mediana=median(Viviendas$Precio)
Estimadores$recortada=medias_recortadas
Estimadores$winsorizada=medias_winsorizadas
Estimadores
plot(Estimadores$recortada~Estimadores$alphas,ylim=c(min(Estimadores[,2:5]),max(Estimadores[,2:5])),col="red",type="l", main="representaci??n de medias robustas", xlab="alfas",ylab="precio")
lines(alphas,Estimadores$winsorizada,col="blue")
lines(alphas,Estimadores$media,col="orange")
lines(alphas,Estimadores$mediana,col="green")
legend(x=mean(alphas),y=max(Estimadores[,2:5]),legend=c("media","mediana","media recortada","media winsorizada"),col=c("orange","green","red","blue"),pch=20)
modelorlm=rlm(Precio~1,data=Viviendas)
summary(modelorlm)
modelorlm=lm(Precio~1,data=Viviendas)
summary(modelorlm)
modelorlm=rlm(Precio~1,data=Viviendas)
summary(modelorlm)
abline(h=modelorlm$coefficients[1],col="black")
x1=c(1,2,3,4,5,6,7,8,9,10)
y1=3*x1+2+rnorm(length(x1),0,1)
modelolm1=lm(y1~x1)
summary(modelolm1)
x2=c(x1,15)
y2=c(y1,300)
modelolm2=lm(y2~x2)
summary(modelolm2)
plot(x2,y2)
abline(a=modelolm1$coefficients[1],b=modelolm1$coefficients[2],col="blue")
abline(a=modelolm2$coefficients[1],b=modelolm2$coefficients[2],col="red")
modelorlm1=rlm(y1~x1)
summary(modelorlm1)
modelorlm2=rlm(y2~x2)
summary(modelorlm2)
abline(a=modelorlm1$coefficients[1],b=modelorlm1$coefficients[2],col="green")
abline(a=modelorlm2$coefficients[1],b=modelorlm2$coefficients[2],col="orange")
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
Ventas=read.csv2("./datos/Ventas.csv",stringsAsFactors = FALSE)
str(Ventas)
summary(Ventas)
head(Ventas)
tail(Ventas)
Ventas$Producto=as.factor(Ventas$Producto)
Ventas$Fecha=as.Date(Ventas$Fecha)
str(Ventas)
head(Ventas)
summary(Ventas)
Ventas$Producto=as.factor(Ventas$Producto)
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "Spanish_Spain.1252")
Ventas$Fecha=as.Date(Ventas$Fecha)
Sys.setlocale("LC_TIME", lct)
str(Ventas)
head(Ventas)
summary(Ventas)
Ventas_A0351=Ventas[Ventas$Producto=="A0351",]
str(Ventas_A0351)
head(Ventas_A0351)
summary(Ventas_A0351)
Ventas_A0351=Ventas_A0351[order(Ventas_A0351$Fecha),]
plot(Ventas_A0351$Cantidad, type="l")
plot(Ventas_A0351$Fecha,Ventas_A0351$Cantidad, type="l")
FECHA_ANALISIS=as.Date("2014-02-01")
#estrablecemos ventana móvil sobre la que hacer el análisis.
FECHA_ANALISIS=as.Date("2014-02-01")
PERIODO_PREVIO=140#train
PERIODO_PRUEBA=30#test
Ventas_A0351_HIS=Ventas_A0351[Ventas_A0351$Fecha<=FECHA_ANALISIS & Ventas_A0351$Fecha>FECHA_ANALISIS-PERIODO_PREVIO,]
Ventas_A0351_NEW=Ventas_A0351[Ventas_A0351$Fecha<=FECHA_ANALISIS + PERIODO_PRUEBA & Ventas_A0351$Fecha>FECHA_ANALISIS,c("Fecha","Cantidad")]
plot(Ventas_A0351_HIS$Fecha,Ventas_A0351_HIS$Cantidad, type="l")
plot(Ventas_A0351_NEW$Fecha,Ventas_A0351_NEW$Cantidad, type="l")
plot(Ventas_A0351_HIS$Fecha,Ventas_A0351_HIS$Cantidad, type="l")
Ventas_ts = ts(Ventas_A0351_HIS$Cantidad,start=c(2013,1,1),frequency=7)
plot(Ventas_ts)
print(Ventas_ts)
plot(Ventas_ts)
model_arima=auto.arima(Ventas_ts,seasonal=TRUE,trace=TRUE)
plot(forecast(model_arima,h=24))
plot(forecast(model_arima,h=24))
summary(model_arima)
forecast(model_arima,h=24)
#para establecer otros intervalos de confianza
forecast(model_arima,h=24,level=c(99))
Ventas_A0351_NEW$Arima=forecast(model_arima,h=PERIODO_PRUEBA)$mean
model_hw=HoltWinters(Ventas_ts)
summary(model_hw)
Ventas_A0351_NEW$MA=forecast(model_ma,h=PERIODO_PRUEBA)$mean
model_ma=ma(Ventas_ts,order=3)
summary(model_ma)
plot(forecast(model_ma, fan=TRUE,h=24))
forecast(model_ma, level=c(80,95),h=24)
Ventas_A0351_NEW$MA=forecast(model_ma,h=PERIODO_PRUEBA)$mean
model_hw=HoltWinters(Ventas_ts)
summary(model_hw)
plot(forecast(model_hw, fan=TRUE,h=24))
forecast(model_hw,level=c(80,95),h=24)
Ventas_A0351_NEW$HW=forecast(model_hw,h=PERIODO_PRUEBA)$mean
summary(model_ma)
plot(forecast(model_ma, fan=TRUE,h=24))
forecast(model_ma, level=c(80,95),h=24)
model_hw=HoltWinters(Ventas_ts)
summary(model_hw)
plot(forecast(model_hw, fan=TRUE,h=24))
forecast(model_hw,level=c(80,95),h=24)
Ventas_A0351_NEW$HW=forecast(model_hw,h=PERIODO_PRUEBA)$mean
model_tslm=tslm(Ventas_ts~trend + season,data=Ventas_ts)
summary(model_tslm)
plot(forecast(model_tslm, fan=TRUE,h=24))
forecast(model_tslm,level=c(80,95),h=24)
Ventas_A0351_NEW$tslm=forecast(model_tslm,h=PERIODO_PRUEBA)$mean
YMAX=max(Ventas_A0351_NEW[,-1])
YMIN=min(Ventas_A0351_NEW[,-1])
plot(Ventas_A0351_NEW$Cantidad,type="l", ylim=c(YMIN,YMAX),lwd=2)
lines(c(Ventas_A0351_NEW$Arima),col="blue")
lines(c(Ventas_A0351_NEW$MA),col="red")
lines(c(Ventas_A0351_NEW$HW),col="green")
lines(c(Ventas_A0351_NEW$tslm),col="cyan")
Ventas_A0351_NEW
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
if(!require("dplyr")){
install.packages("dplyr")
library("dplyr")
}
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
Conversiones=read.csv2("./datos/Conversiones.csv",stringsAsFactors = FALSE)
str(Conversiones)
head(Conversiones)
summary(Conversiones)
Conversiones$mes=as.factor(Conversiones$mes)
str(Conversiones)
head(Conversiones)
summary(Conversiones)
RESULTADOS=summarise(group_by(Conversiones,mes),
Contador=length(ID_CLIENTE),
Conversion=mean(microconversion,na.rm=TRUE),
PaginasVista=mean(pageviews,na.rm=TRUE)
)
RESULTADOS
t.test(Conversiones$microconversion[Conversiones$mes=="Marzo"],
Conversiones$microconversion[Conversiones$mes=="Abril"])
t.test(Conversiones$pageviews[Conversiones$mes=="Marzo"],
Conversiones$pageviews[Conversiones$mes=="Abril"])
Acciones=read.csv2("./datos/Clientes con acci??n.csv",stringsAsFactors = FALSE)
Conversiones$Accion="NO"
Conversiones$Accion[Conversiones$ID_CLIENTE %in% Acciones$ID_CLIENTE]="SI"
Conversiones_abril=Conversiones[Conversiones$mes=="Abril",c(1,3:5)]
RESULTADOS_abril=summarise(group_by(Conversiones_abril,Accion),
Contador=length(ID_CLIENTE),
Conversion=mean(microconversion,na.rm=TRUE),
PaginasVista=mean(pageviews,na.rm=TRUE)
)
RESULTADOS_abril
t.test(Conversiones_abril$microconversion[Conversiones_abril$Accion=="SI"],
Conversiones_abril$microconversion[Conversiones_abril$Accion=="NO"])
t.test(Conversiones_abril$pageviews[Conversiones_abril$Accion=="SI"],
Conversiones_abril$pageviews[Conversiones_abril$Accion=="NO"])
Conversiones$mes=as.factor(Conversiones$mes)
str(Conversiones)
head(Conversiones)
summary(Conversiones)
RESULTADOS=summarise(group_by(Conversiones,mes),
Contador=length(ID_CLIENTE),
Conversion=mean(microconversion,na.rm=TRUE),
PaginasVista=mean(pageviews,na.rm=TRUE)
)
RESULTADOS
t.test(Conversiones$microconversion[Conversiones$mes=="Marzo"],
Conversiones$microconversion[Conversiones$mes=="Abril"])
t.test(Conversiones$pageviews[Conversiones$mes=="Marzo"],
Conversiones$pageviews[Conversiones$mes=="Abril"])
Acciones=read.csv2("./datos/Clientes con acci??n.csv",stringsAsFactors = FALSE)
Acciones=read.csv2("./datos/Clientes con accion.csv",stringsAsFactors = FALSE)
Acciones=read.csv2("./datos/Clientes con accion.csv",stringsAsFactors = FALSE)
Acciones=read.csv2("./datos/Clientes con accion.csv",stringsAsFactors = FALSE)
Conversiones$Accion="NO"
Conversiones$Accion[Conversiones$ID_CLIENTE %in% Acciones$ID_CLIENTE]="SI"
Conversiones_abril=Conversiones[Conversiones$mes=="Abril",c(1,3:5)]
RESULTADOS_abril=summarise(group_by(Conversiones_abril,Accion),
Contador=length(ID_CLIENTE),
Conversion=mean(microconversion,na.rm=TRUE),
PaginasVista=mean(pageviews,na.rm=TRUE)
)
RESULTADOS_abril
t.test(Conversiones_abril$microconversion[Conversiones_abril$Accion=="SI"],
Conversiones_abril$microconversion[Conversiones_abril$Accion=="NO"])
t.test(Conversiones_abril$pageviews[Conversiones_abril$Accion=="SI"],
Conversiones_abril$pageviews[Conversiones_abril$Accion=="NO"])
Conversiones$Agreg=paste(Conversiones$mes,Conversiones$Accion)
RESULTADOS_evolucion=summarise(group_by(Conversiones,Agreg),
Contador=length(ID_CLIENTE),
Conversion=mean(microconversion,na.rm=TRUE),
PaginasVista=mean(pageviews,na.rm=TRUE)
)
RESULTADOS_evolucion
Conversiones_marzo=Conversiones[Conversiones$mes=="Marzo",c(1,3:5)]
colnames(Conversiones_marzo)=c("ID_CLIENTE","pageviews_m","microconversion_m","Accion")
colnames(Conversiones_abril)=c("ID_CLIENTE","pageviews_a","microconversion_a","Accion")
Conversiones_merge=merge(Conversiones_marzo,Conversiones_abril)
head(Conversiones_merge)
Conversiones_merge$microconversion_Diff=Conversiones_merge$microconversion_a-Conversiones_merge$microconversion_m
Conversiones_merge$pageviews_Diff=Conversiones_merge$pageviews_a-Conversiones_merge$pageviews_m
t.test(Conversiones_merge$microconversion_Diff[Conversiones_merge$Accion=="SI"],
Conversiones_merge$microconversion_Diff[Conversiones_merge$Accion=="NO"])
library("dplyr")
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
VENTAS=read.csv2("datos/Operaciones.csv",stringsAsFactors = FALSE)
str(VENTAS)
summary(VENTAS)
head(VENTAS)
tail(VENTAS)
VENTAS$FECHA=as.Date(VENTAS$FECHA)
VENTAS$FRECUENCIA=1
summary(VENTAS)
FECHA_ANALISIS=as.Date("2014-12-31")
PLAZO_ANALISIS=365
RFM_VENTAS=summarise(group_by(VENTAS[VENTAS$FECHA<FECHA_ANALISIS & VENTAS$FECHA>=FECHA_ANALISIS-PLAZO_ANALISIS,], CLIENTE),
RECENCIA = as.numeric(min(FECHA_ANALISIS-FECHA, na.rm = TRUE)),
FRECUENCIA = sum(FRECUENCIA, na.rm = TRUE),
MONETIZACION =  sum(IMPORTE, na.rm = TRUE)
)
head(RFM_VENTAS)
q_FRECUENCIA=quantile(RFM_VENTAS$FRECUENCIA,probs=c(0.33,0.66))
q_MONETIZACION=quantile(RFM_VENTAS$MONETIZACION,probs=c(0.33,0.66))
q_RECENCIA=quantile(RFM_VENTAS$RECENCIA,probs=c(0.33,0.66))
q_FRECUENCIA
q_MONETIZACION
q_RECENCIA
RFM_VENTAS$G_FRECUENCIA=1+sapply(RFM_VENTAS$FRECUENCIA,FUN=function(x){sum(x>=q_FRECUENCIA)})
FECHA_ANALISIS=as.Date("2014-12-31")
PLAZO_ANALISIS=365
RFM_VENTAS=summarise(group_by(VENTAS[VENTAS$FECHA<FECHA_ANALISIS & VENTAS$FECHA>=FECHA_ANALISIS-PLAZO_ANALISIS,], CLIENTE),
RECENCIA = as.numeric(min(FECHA_ANALISIS-FECHA, na.rm = TRUE)),
FRECUENCIA = sum(FRECUENCIA, na.rm = TRUE),
MONETIZACION =  sum(IMPORTE, na.rm = TRUE)
)
head(RFM_VENTAS)
q_FRECUENCIA=quantile(RFM_VENTAS$FRECUENCIA,probs=c(0.33,0.66))
q_MONETIZACION=quantile(RFM_VENTAS$MONETIZACION,probs=c(0.33,0.66))
q_RECENCIA=quantile(RFM_VENTAS$RECENCIA,probs=c(0.33,0.66))
q_FRECUENCIA
q_MONETIZACION
q_RECENCIA
RFM_VENTAS$G_FRECUENCIA=1+sapply(RFM_VENTAS$FRECUENCIA,FUN=function(x){sum(x>=q_FRECUENCIA)})
RFM_VENTAS$G_MONETIZACION=1+sapply(RFM_VENTAS$MONETIZACION,FUN=function(x){sum(x>=q_MONETIZACION)})
RFM_VENTAS$G_RECENCIA=1+sapply(RFM_VENTAS$RECENCIA,FUN=function(x){sum(x>=q_RECENCIA)})
RFM_VENTAS$SEGMENTO_RFM=paste(RFM_VENTAS$G_RECENCIA,RFM_VENTAS$G_FRECUENCIA,RFM_VENTAS$G_MONETIZACION,sep="_")
table(RFM_VENTAS$SEGMENTO_RFM)
head(RFM_VENTAS)
if(!require("dplyr")){
install.packages("dplyr")
library("dplyr")
}
setwd("~/Documents/DATA_SCIENCE_MASTER/Casos_de_Negocio")
VENTAS=read.csv2("datos/Operaciones.csv",stringsAsFactors = FALSE)
str(VENTAS)
summary(VENTAS)
head(VENTAS)
tail(VENTAS)
VENTAS$FECHA=as.Date(VENTAS$FECHA)
VENTAS$FRECUENCIA=1
summary(VENTAS)
FECHA_ANALISIS=as.Date("2014-12-31")
PLAZO_ANALISIS=365
RFM_VENTAS=summarise(group_by(VENTAS[VENTAS$FECHA<FECHA_ANALISIS & VENTAS$FECHA>=FECHA_ANALISIS-PLAZO_ANALISIS,], CLIENTE),
RECENCIA = as.numeric(min(FECHA_ANALISIS-FECHA, na.rm = TRUE)),
FRECUENCIA = sum(FRECUENCIA, na.rm = TRUE),
MONETIZACION =  sum(IMPORTE, na.rm = TRUE)
)
dev.off()
dev.off()
png("./graficos clustering RFM/Densidad RFM.png",width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA, xlab="FRECUENCIA", ylab="RECENCIA")
frame()
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION, xlab="FRECUENCIA",ylab="MONETIZACION")
smoothScatter(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION, xlab="RECENCIA",ylab="MONETIZACION")
mtext("Densidad de clientes mediante Modelo RFM ", outer = TRUE, cex = 2)
dev.off()
dev.off()
png("./graficos clustering RFM/Densidad RFM.png",width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA, xlab="FRECUENCIA", ylab="RECENCIA")
frame()
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION, xlab="FRECUENCIA",ylab="MONETIZACION")
smoothScatter(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION, xlab="RECENCIA",ylab="MONETIZACION")
mtext("Densidad de clientes mediante Modelo RFM ", outer = TRUE, cex = 2)
dev.off()
## PREPARAMOS LOS DATOS MEDIANTE SU NORMALIZACI??N
RFM_VENTAS_NORM=scale(RFM_VENTAS[,-1])
## CALCULAMOS LOS Clusters EN FUNCI??N AL N??MERO ELEGIDO
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(RFM_VENTAS_NORM,NUM_CLUSTERS)
## SELECCIONAMOS LOS GRUPOS
Clusters=Modelo$cluster
## MOSTRAMOS LA DISTRIBUCI??N DE LOS GRUPOS
table(Clusters)
## MOSTRAMOS LOS DATOS REPRESENTATIVOS DE LOS GRUPOS
aggregate(RFM_VENTAS[,-1], by = list(Clusters), mean)
## O SU VERSI??N ROBUSTA
aggregate(RFM_VENTAS[,-1], by = list(Clusters), median)
dev.off()
png(paste("./graficos clustering RFM/Kmeans ",NUM_CLUSTERS," clusters RFM.png",sep=""),width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA,col=Clusters, xlab="FRECUENCIA", ylab="RECENCIA")
plot(c(0,max(RFM_VENTAS$RECENCIA)),c(0,max(RFM_VENTAS$RECENCIA)), type="n", axes=F, xlab="", ylab="",xlim=c(0,max(RFM_VENTAS$RECENCIA)),ylim=c(0,max(RFM_VENTAS$RECENCIA)))
legend(1,max(RFM_VENTAS$RECENCIA)/2-1,legend=c(1:NUM_CLUSTERS),yjust = 0.5,col=c(1:NUM_CLUSTERS),pch=15,cex=2)
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="FRECUENCIA",ylab="MONETIZACION")
plot(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="RECENCIA",ylab="MONETIZACION")
mtext(paste("Clusterizaci??n kmeans de clientes mediante Modelo RFM",sep=""), outer = TRUE, cex = 2)
dev.off()
for (k in 1:8){
## CALCULAMOS LOS Clusters EN FUNCI??N AL N??MERO ELEGIDO
NUM_CLUSTERS=k
set.seed(1234)
Modelo=kmeans(RFM_VENTAS_NORM,NUM_CLUSTERS)
## SELECCIONAMOS LOS GRUPOS
Clusters=Modelo$cluster
## MOSTRAMOS LA DISTRIBUCI??N DE LOS GRUPOS
table(Clusters)
## MOSTRAMOS LOS DATOS REPRESENTATIVOS DE LOS GRUPOS
aggregate(RFM_VENTAS[,-1], by = list(Clusters), mean)
## O SU VERSI??N ROBUSTA
aggregate(RFM_VENTAS[,-1], by = list(Clusters), median)
## -------------------------------------------------------------------------
##### 9. Bloque de Representaci??n Gr??fica clusters mediante Modelo RFM #####
#dev.off()
png(paste("./graficos clustering RFM/Kmeans ",NUM_CLUSTERS," clusters RFM.png",sep=""),width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA,col=Clusters, xlab="FRECUENCIA", ylab="RECENCIA")
plot(c(0,max(RFM_VENTAS$RECENCIA)),c(0,max(RFM_VENTAS$RECENCIA)), type="n", axes=F, xlab="", ylab="",xlim=c(0,max(RFM_VENTAS$RECENCIA)),ylim=c(0,max(RFM_VENTAS$RECENCIA)))
legend(1,max(RFM_VENTAS$RECENCIA)/2-1,legend=c(1:NUM_CLUSTERS),yjust = 0.5,col=c(1:NUM_CLUSTERS),pch=15,cex=2)
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="FRECUENCIA",ylab="MONETIZACION")
plot(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="RECENCIA",ylab="MONETIZACION")
mtext(paste("Clusterizaci??n kmeans de clientes mediante Modelo RFM",sep=""), outer = TRUE, cex = 2)
dev.off()
}
RFM_VENTAS$CLUSTER=Clusters
head(RFM_VENTAS)
