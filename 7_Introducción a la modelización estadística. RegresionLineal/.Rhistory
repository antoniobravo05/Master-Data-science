y=rnorm(NN,100,5)
summary(y)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=1000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100000
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
nn=100
muestra=sample(y,nn)
mean(muestra)
#Ejemplo muestreo simple con reposicion.
sample(letters,20,replace=T)
#Ejemplo de implementacion con R: usa dplyr
require(dplyr)
NN=nrow(diamonds) #tamaño de la poblacion
head(diamonds)
nn= 250 #tamaño muestral
######## Preambulo
diamonds %>% sample_n(nn) #muestreo simple de la base de datos "diamonds"
mean(diamonds$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
muestra<-diamonds %>% sample_n(nn)
mean(muestra$price)
#Si repetimos estas 2 ultimas lineas, vemos que varía mucho.
diamonds %>%  group_by(cut) %>% summarise(media=mean(price), n = n()) #peso y media de los estratos: calidad del diamante (cut)
######## Muestreo estratificado con afijación fija
k<-5#son los estratos, es decir los grupos que hay si agrupamos por cut.
muestra <- diamonds %>% group_by(cut) %>% sample_n(nn/k)#nn/k=250/5=50. Vamos a coger 50 muestras de cada estrato
muestra %>% summarise(media=mean(price), n = n())
#puedo calcular la media
mean(muestra$price)
muestra %>% summarise(media=mean(price), n = n())
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
######## Muestreo estratificado con afijación proporcional
#aqui hacemos lo mismo que en el caso anterior cambiando que ahora usamos sample_frac. Ahora no le pasamos el tamaño de la muestra,
#le pasamos nn/NN, es decir, la relacion entre tamaño de muestra y poblacion.
#Seleccionare una muestra proporcional a cada estrato. n_k=n*N_k/N
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
#ahora vemos como cada estrato tiene un nº de muestras distinto, no es uniforme, es proporcional al tamaño de cada estrato.
#podríamos en este caso usar le media muestral (asigna el mismo peso a cada elemento de la muestra):
mean(muestra$price)
muestra <- diamonds %>% group_by(cut,color) %>% sample_frac(nn/NN)
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
#ahora vemos como cada estrato tiene un nº de muestras distinto, no es uniforme, es proporcional al tamaño de cada estrato.
#podríamos en este caso usar le media muestral (asigna el mismo peso a cada elemento de la muestra):
mean(muestra$price)
muestra <- diamonds %>% group_by(cut,color) %>% sample_frac(nn/NN)
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
#ahora vemos como cada estrato tiene un nº de muestras distinto, no es uniforme, es proporcional al tamaño de cada estrato.
#podríamos en este caso usar le media muestral (asigna el mismo peso a cada elemento de la muestra):
mean(muestra$price)
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
#ahora vemos como cada estrato tiene un nº de muestras distinto, no es uniforme, es proporcional al tamaño de cada estrato.
#podríamos en este caso usar le media muestral (asigna el mismo peso a cada elemento de la muestra):
mean(muestra$price)
muestra <- diamonds %>% group_by(cut) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
#ahora vemos como cada estrato tiene un nº de muestras distinto, no es uniforme, es proporcional al tamaño de cada estrato.
#podríamos en este caso usar le media muestral (asigna el mismo peso a cada elemento de la muestra):
mean(muestra$price)
#El peso del diamante influye mucho en el peso, estudiar un poco que ocurre con el:
qplot(carat,price,data=diamonds)
#Mientras tanto, para el cut
qplot(cut,price,data=diamonds)
#Mientras tanto, para el cut
qplot(cut,price,data=diamonds,geom="boxplot")
muestra <- diamonds %>% group_by(cut,color) %>% sample_frac(nn/NN)
#por color:
qplot(color,price,data=diamonds,geom="boxplot")
####### Muestreo estratificado por calidad y color del diamante
# Vamos a intentar estratificar según el color y el cut.
muestra <- diamonds %>% group_by(cut,color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
muestra <- diamonds %>% group_by(color) %>% sample_frac(nn/NN)
muestra %>% summarise(media=mean(price),n = n())
mean(muestra$price)
diamonds$origen=sample(provincias,NN,replace=TRUE) #se asigna de manera artificial un estado (americano) a cada diamante
diamonds %>%  group_by(origen) %>% summarise(media=mean(price), n = n())
diamonds$origen=sample(provincias,NN,replace=TRUE)
diamonds$origen
head(diamonds)
diamonds %>%  group_by(origen) %>% summarise(media=mean(price), n = n())
mm=10
muestraI <- diamonds %>%  group_by(origen) %>% summarise(N = n()) %>% sample_n(mm,weight=N) #Primero se muestrea 10 estados.
#Seleccionaremos las provincias con el tamaño proporcional en cuestion a los diamantes que tiene esta provincia
muestraI
#Una vez que tenemos las provincias nos limitaos a analizar la sub-base original que solo contiene diamantes en estas provincias.
frameI <- diamonds %>% filter(origen %in% muestraI$origen)  # nos quedamos con los 10 estados seleccionados
frameI <- diamonds %>% filter(origen %in% muestraI$origen)  # nos quedamos con los 10 estados seleccionados
NNI=nrow(frameI)
NNI
nn/mm
muestraII <- frameI %>%	group_by(origen) %>% sample_frac(nn/mm) #Muestreo proporcional dentro de cada conglometrado
muestraII <- frameI %>%	group_by(origen) %>% sample_n(nn/mm) #Muestreo proporcional dentro de cada conglometrado
muestraII %>% summarise(media=mean(price),n = n())
muestraII
muestraII %>% summarise(media=mean(price),n = n())
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=500
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=500
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=500
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=500
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
N=1e6
alturas=rnorm(N,100,7) #Altura de 1m con una cierta desv.tip
n=100
#extraigo muestra de la población
muestra=sample(alturas,n)
mean(muestra)
#usando la teoría estadistica, puedo obtener a partir de una sola muestra, resultados de este tipo:
t.test(muestra)
require(tidyverse)
set.seed(1234)
NN=1e6
poblacion=rnorm(NN,108,5)#poblacion
n=250#tamaño muestral
(sample(poblacion,nn))
require(tidyverse)
set.seed(1234)
NN=1e6
poblacion=rnorm(NN,108,5)#poblacion
n=250#tamaño muestral
#en vez de hacer un bucle podemos usar replicate para generar 1000 veces el proceso
K=1000
medias=replicate(K,mean(sample(poblacion,nn)))#obtendremos 1000 medias muestrales
hist(medias)
mean(medias)
#es un muestreo equiprobabilistico, la media deberia ser igual a la otra media, es decir 108.
qplot(medias,ylab="frecuencia",xlab="Media Muestral")
mean(medias)
sd(medias)
1/sqrt(10)
hist(medias)
#Histograma
qplot(medias,ylab="frecuencia",xlab="Media Muestral",bins=20)
#Histograma
qplot(medias,ylab="frecuencia",xlab="Media Muestral",bins=10)
qnorm(0.95)
qnorm(0.975)
K=1000
resumen<-function() {
muestra=sample(poblacion,nn);
c(media=mean(muestra),ds=sd(muestra))
}
res=replicate(K,resumen)
#traspongo
res=data.frame(t(res))
head(res)
K=1000
resumen<-function() {
muestra=sample(poblacion,nn);
c(media=mean(muestra),ds=sd(muestra))
}
res=replicate(K,resumen())
#traspongo
res=data.frame(t(res))
head(res)
res$limite_inferior=res$media-1.96*res$ds
res$limite_superior=res$media+1.96*res$ds
head(res)
nn
#Calculo un intervalo de confianza para cada muestra
res$limite_inferior=res$media-1.96*(res$ds/sqrt(nn))
res$limite_superior=res$media+1.96*(res$ds/sqrt(nn))
head(res)
#Segun la teoria, en el 95% de los casos contendrán el verdadero valor (mu=108)
#Calculamos el acierto.
res$acierto=(res$limite_inferior<108 & 108<res$limite_superior)
head(res)
mean(res$acierto)
#la distribucion t-student es como una normal pero más pesada, sus colas se alargan mas y es por que hay mas incertibumbre:
#y+-t*s/sqrt(n)
qt(.975,nn-1)#donde nn son los grados de libertad
#la distribucion t-student es como una normal pero más pesada, sus colas se alargan mas y es por que hay mas incertibumbre:
#y+-t*s/sqrt(n)
qt(.975,500-1)#donde nn son los grados de libertad
#la distribucion t-student es como una normal pero más pesada, sus colas se alargan mas y es por que hay mas incertibumbre:
#y+-t*s/sqrt(n)
qt(.975,1000-1)#donde nn son los grados de libertad
res$limite_inferior=res$media-qt(.975,nn-1)*(res$ds/sqrt(nn))
res$limite_superior=res$media+qt(.975,nn-1)**(res$ds/sqrt(nn))
head(res)
#Segun la teoria, en el 95% de los casos contendrán el verdadero valor (mu=108)
#Calculamos el acierto.
res$acierto=(res$limite_inferior<108 & 108<res$limite_superior)
head(res)
mean(res$acierto)
#REVISAR CONTRASTE DE HIPÓTESIS EN APUNTES
#Oobteniendo el p_valor en R:
pnorm(327,330,5/sqrt(10))
if(!require("ggplot2")){
install.packages("ggplot2")
library("ggplot2")
}
if (!require("gap")){
install.packages("gap")
library(gap)
}
setwd("D:/Documentos, Trabajos y Demás/Formación/Kschool/201807 Clase VIII Master Data Science/2 Introducción a la Modelización Estadística")
setwd("~/Desktop/DATA SCIENCE/ Introducción a la modelización estadística. RegresionLineal")
#setwd("D:/Documentos, Trabajos y Demás/Formación/Kschool/201807 Clase VIII Master Data Science/2 Introducción a la Modelización Estadística")
setwd("~/Desktop/DATA SCIENCE/ Introducción a la modelización estadística. RegresionLineal")
creditos=read.csv("data/creditos.csv",stringsAsFactors = FALSE)
str(creditos)
head(creditos)
summary(creditos)
creditos$Gender=as.factor(creditos$Gender)
creditos$Mortgage=as.factor(creditos$Mortgage)
creditos$Married=as.factor(creditos$Married)
creditos$Ethnicity=as.factor(creditos$Ethnicity)
summary(creditos)
t.test(Income ~ Gender, data = creditos)
# mediante un modelo lineal
modeloT=lm(Income ~ Gender, data = creditos)
summary(modeloT)
modeloInd1=lm(Income ~ Rating, data = creditos)
summary(modeloInd1)
ggplot(creditos, aes(x = Rating, y = Income)) + geom_point() +
geom_smooth(method = "lm", se=TRUE, color="red", formula = y ~ x)
#cuando se habla de ML no se da probabilidad, es un tema de puntaje o score porque no hay una distribucion estadistica detras.
#Si estuviera basado en distr. estadisticas se podría dar una probabilidad (por ejemplo en la regresion logaritmica)
modeloInd2=lm(Income ~ Products, data = creditos)
summary(modeloInd2)
modeloInd3=lm(Income ~ Age, data = creditos)
summary(modeloInd3)
modeloInd4=lm(Income ~ Education, data = creditos)
summary(modeloInd4)
modeloInd5=lm(Income ~ Gender, data = creditos)
summary(modeloInd5)
modeloInd6=lm(Income ~ Mortgage, data = creditos)
summary(modeloInd6)
modeloInd7=lm(Income ~ Married, data = creditos)
summary(modeloInd7)
modeloInd8=lm(Income ~ Ethnicity, data = creditos)
summary(modeloInd8)
modeloInd9=lm(Income ~ Balance, data = creditos)
summary(modeloInd9)
modeloGlobal=lm(Income ~ ., data = creditos)
summary(modeloGlobal)
anova(modeloInd1,modeloGlobal)
modeloFinal=lm(Income ~ Rating+Mortgage+Balance, data = creditos)
summary(modeloFinal)
plot(modeloFinal$residuals)
hist(modeloFinal$residuals)
qqnorm(modeloFinal$residuals); qqline(modeloFinal$residuals,col=2)
#calculo de Intervalos de confianza
confint(modeloFinal,level=0.95)
cor(modeloFinal$residuals,creditos$Rating)
cor(modeloFinal$residuals,creditos$Balance)
boxplot(modeloFinal$residuals~creditos$Mortgage)
aggregate(modeloFinal$residuals~creditos$Mortgage,FUN=mean)
shapiro.test(modeloFinal$residual)
anova(modeloFinal,modeloGlobal)
modeloBalance=lm(Balance ~ ., data = creditos)
summary(modeloBalance)
#vamos a explicar el saldo en cuenta respecto a otras variables.
#tnemos que buscar que cosas nos pueden llamar la atencion, el income es negativo, a menos ingresos menos balance es raro -->ceteris_parius
#aqui el problema es que el rating es un puntaje, a igualdad de rating el que tiene mas income tiene mas balance:
modeloBalance=lm(Balance ~ income, data = creditos)
#vamos a explicar el saldo en cuenta respecto a otras variables.
#tnemos que buscar que cosas nos pueden llamar la atencion, el income es negativo, a menos ingresos menos balance es raro -->ceteris_parius
#aqui el problema es que el rating es un puntaje, a igualdad de rating el que tiene mas income tiene mas balance:
modeloBalance=lm(Balance ~ Income, data = creditos)
summary(modeloBalance)
ModelAutoBackward=step(modeloBalance,direction="backward",trace=1)
modeloBalance=lm(Balance ~ ., data = creditos)
summary(modeloBalance)
ModelAutoBackward=step(modeloBalance,direction="backward",trace=1)
ModelAutoStepwise=step(modeloBalance,direction="both",trace=1)
summary(ModelAutoStepwise)
anova(ModelAutoBackward,modeloBalance)
anova(ModelAutoStepwise,modeloBalance)
Ventas=read.csv2("data/ventas.csv",stringsAsFactors = FALSE)
str(Ventas)
head(Ventas)
summary(Ventas)
Ventas$Fecha=as.Date(Ventas$Fecha)
Ventas$Producto=as.factor(Ventas$Producto)
str(Ventas)
head(Ventas)
summary(Ventas)
modelo1=lm(Cantidad~Precio,data=Ventas)
summary(modelo1)
plot(modelo1$residuals)
smoothScatter(modelo1$residuals)
#se mueven en torno al 0
hist(modelo1$residuals)
#vemos mucho mejor que se asemeja a una normal
qqnorm(modelo1$residuals); qqline(modelo1$residuals,col=2)
#se ajusta bien a la recta normal
confint(modelo1,level=0.95)
modelo2=lm(log(Cantidad)~Precio,data=Ventas)
summary(modelo2)
#interpretacion: como el log está en la parte izquierda, una subida de precio en 1 euro es que las ventas se van a recudir en un 14%
plot(modelo2$residuals)
smoothScatter(modelo2$residuals)
hist(modelo2$residuals)
qqnorm(modelo2$residuals); qqline(modelo2$residuals,col=2)
confint(modelo2,level=0.95)
##### 21. Bloque de Estimación de elasticidad de las ventas con respecto al precio #####
#aplicando logaritmo en ambos lados. Este modelo es el que mejor va, economicamente hablando.
modelo3=lm(log(Cantidad)~log(Precio),data=Ventas)
summary(modelo3)
#interpretacion: como el log está en la parte izquierda, una subida de precio en 1% es que las ventas se van a recudir en un 0.87%. Dependerá del precio real que tendrá en ese momento.
plot(modelo3$residuals)
hist(modelo3$residuals)
qqnorm(modelo3$residuals); qqline(modelo3$residuals,col=2)
confint(modelo3,level=0.95)
plot(Ventas$Precio,Ventas$Cantidad)
abline(modelo1,col=2)
#pasa esto por que he querido juntar dos productos disintos en el mismo análisis
plot(modelo1$residuals,col=Ventas$Producto)
plot(modelo2$residuals,col=Ventas$Producto)
plot(modelo3$residuals,col=Ventas$Producto)
modelo1_A0143=lm(Cantidad~Precio,data=Ventas[Ventas$Producto=="A0143",])
modelo1_A0351=lm(Cantidad~Precio,data=Ventas[Ventas$Producto=="A0351",])
plot(Ventas$Precio,Ventas$Cantidad)
abline(modelo1,col="red",lty = "dashed")
abline(modelo1_A0143,col="blue")
abline(modelo1_A0351,col="green")
summary(modelo1)
#y=3304.878-251.793*precio. R²=0.82
summary(modelo1_A0143)
#y=7264.56-1139.53*precio. R²=0.36
summary(modelo1_A0351)
chow.test(Ventas$Cantidad[Ventas$Producto=="A0143"],Ventas$Precio[Ventas$Producto=="A0143"],Ventas$Cantidad[Ventas$Producto=="A0351"],Ventas$Precio[Ventas$Producto=="A0351"])
#hacemos los tres analisis enteiores de forma conjunta, obtendremos con una regresion los 3 modelos de golpe.
modelo1_Chow=lm(Cantidad~Precio*Producto,data=Ventas)
summary(modelo1)
summary(modelo1_Chow)
#agrupando, vemos que los coedificntes c y d son estadisticamente diferenctes de 0, por lo que son efectos distintos para los dos productos.
plot(modelo1$residuals,col=Ventas$Producto)
plot(modelo1_Chow$residuals,col=Ventas$Producto)
plot(Ventas$Precio,Ventas$Cantidad)
abline(modelo1,col="red",lty = "dashed")
abline(a=7264.56,b=-1139.53,col="blue")
abline(a=7264.56-3244.34,b=-1139.53+796.03,col="green")
anova(modelo1,modelo1_Chow)
x=c(1,2,3,4,5,6,7,8,9,10)
y=3*x+2+rnorm(length(x),0,1)
Datos=data.frame(x,y)
modelolm=lm(y~x, data=Datos)
summary(modelolm)
xOut=c(x,15)
yOut=c(y,300)
DatosOut=data.frame(xOut,yOut)
modelolmOut=lm(yOut~xOut,data=DatosOut)
summary(modelolmOut)
plot(xOut,yOut)
abline(modelolm,col="blue")
abline(modelolmOut,col="red")
#Vemos como la regresion ajuta mal con los outlayers. Un unico outlayer me fastidia bastante.
abline(a=modelolm$coefficients[1],b=modelolm$coefficients[2],col="blue")
#Vemos como la regresion ajuta mal con los outlayers. Un unico outlayer me fastidia bastante.
abline(a=modelolm$coefficients[1],b=modelolm$coefficients[2],col="blue")
abline(a=modelolmOut$coefficients[1],b=modelolmOut$coefficients[2],col="red")
ggplot(Datos, aes(x = x, y = y)) + geom_point() +
geom_smooth(method = "lm", se=TRUE, color="red", formula = y ~ x)
ggplot(DatosOut, aes(x = xOut, y = yOut)) + geom_point() +
geom_smooth(method = "lm", se=TRUE, color="red", formula = y ~ x)
